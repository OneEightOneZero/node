#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('wx-server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
var server = require('http').Server(app);
var socketServer = require('ws').Server;
var wss = new socketServer({server: server, port: 8080});

wss.on('connection', function (client) {
    // setInterval(() => {
    //     client.send('test')
    // }, 1000);
    client.on('message', function (_message) {
        console.log(_message)
        // setInterval(() => {
        //     client.send('test')
        // }, 1000);

        // console.log(wss.clients)
        // 自收自发  类似ajax
        // client.send(_message)
        // 自收全发 
        wss.broadcast(_message);
    	// var _messageObj = JSON.parse(_message);
        // //status = 1 表示正常聊天
        // _messageObj.status = 1;
    	// this.message = _messageObj;
        // //把客户端的消息广播给所有在线的用户
        // wss.broadcast(_messageObj);
    });

    // 退出聊天  
    client.on('close', function() {  
        try{
            //把客户端的消息广播给所有在线的用户
            wss.broadcast('你关闭了');  
        }catch(e){  
            console.log('刷新页面了');  
        }  
    });  
});

//定义广播方法
wss.broadcast = function broadcast(_message) {  
    wss.clients.forEach(function(client) { 
        client.send(_message)
    });  
}; 

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
